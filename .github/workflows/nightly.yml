name: Release nightly build

on:
  workflow_run:
    workflows: ["Cargo Build & Test"]
    branches: [main]
    types:
      - completed

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RELEASE_NAME: Nightly release
  RELEASE_TAG_NAME: nightly
  RELEASE_IS_PRERELEASE: true

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    name: Release - ${{ matrix.platform.target }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
            os_name: windows
            bins: cross
            build: cross
          - os: windows-latest
            target: i686-pc-windows-msvc
            arch: x86
            os_name: windows
            bins: cross
            build: cross
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            arch: arm64
            os_name: windows
            bins: cross
            build: cross
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x64
            os_name: linux
            bins: cargo-deb, cargo-zigbuild
            build: cargo-zigbuild
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            arch: x86
            os_name: linux
            bins: cargo-deb, cargo-zigbuild
            build: cargo-zigbuild
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            arch: arm64
            os_name: linux
            bins: cargo-deb, cargo-zigbuild
            build: cargo-zigbuild
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            arch: armv7
            os_name: linux
            bins: cargo-deb, cargo-zigbuild
            build: cargo-zigbuild
          - os: ubuntu-latest
            target: x86_64-unknown-freebsd
            arch: x64
            os_name: freebsd
            bins: cross
            build: cross
          - os: ubuntu-latest
            target: i686-unknown-freebsd
            arch: x86
            os_name: freebsd
            bins: cross
            build: cross
          - os: macos-latest
            target: x86_64-apple-darwin
            arch: x64
            os_name: macos
            bins: cargo-zigbuild
            build: cargo-zigbuild
          - os: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
            os_name: macos
            bins: cargo-zigbuild
            build: cargo-zigbuild

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.platform.build == 'cargo-zigbuild' }}

      - uses: moonrepo/setup-rust@v1
        with:
          targets: ${{ matrix.platform.target }}
          bins: ${{ matrix.platform.bins }}
          cache: false

      - name: Build binary
        run: ${{ matrix.platform.build }} build --target ${{ matrix.platform.target }} --release --locked

      - name: Create Deb package
        if: ${{ matrix.platform.os_name == 'linux' }}
        run: cargo deb --target ${{ matrix.platform.target }} --no-build --no-strip

      - name: Rename binary
        id: rename_binary
        shell: pwsh
        run: |
          $bin = if ($env:RUNNER_OS -eq 'Windows') { "komac.exe" } else { "komac" }
          $newName = "KomacPortable"
          if ($env:RUNNER_OS -ne 'Windows') {
            $newName += "-${{ matrix.platform.os_name }}"
          }
          $newName += "-nightly-${{ matrix.platform.arch }}"
          if ($env:RUNNER_OS -eq 'Windows') {
            $newName += ".exe"
          }
          Rename-Item -Path "target/${{ matrix.platform.target }}/release/$bin" -NewName "$newName"
          "name=$newName" >> $env:GITHUB_OUTPUT

      - name: Create Tar archive
        if: ${{ matrix.platform.os != 'windows-latest' }}
        run: |
          tar -czvf ${{ steps.rename_binary.outputs.name }}.tar.gz -C target/${{ matrix.platform.target }}/release ${{ steps.rename_binary.outputs.name }}
          rm target/${{ matrix.platform.target }}/release/${{ steps.rename_binary.outputs.name }}

      - name: Create Inno Installer
        if: ${{ matrix.platform.os == 'windows-latest' }}
        shell: pwsh
        run: |
          $input = "../target/${{ matrix.platform.target }}/release/${{ steps.rename_binary.outputs.name }}"
          iscc.exe assets/installer.iss `
            /DInputExecutable=$input `
            /DArchitecture=${{ matrix.platform.arch }} `
            /F$("${{ steps.rename_binary.outputs.name }}".Replace("Portable", "Setup").TrimEnd(".exe"))

      - name: Release nightly binary
        uses: softprops/action-gh-release@v1
        with:
          name: ${{env.RELEASE_NAME}}
          tag_name: ${{env.RELEASE_TAG_NAME}}
          prerelease: ${{env.RELEASE_IS_PRERELEASE}}
          files: |
            target/${{ matrix.platform.target }}/release/${{ steps.rename_binary.outputs.name }}
            target/${{ matrix.platform.target }}/debian/*.deb
            ${{ steps.rename_binary.outputs.name }}.tar.gz
            assets/Output/*
